<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>编译原理 on Dan`s Blog</title>
        <link>https://d4n-sec.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
        <description>Recent content in 编译原理 on Dan`s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>DanSec</copyright>
        <lastBuildDate>Thu, 14 Nov 2024 14:03:12 +0800</lastBuildDate><atom:link href="https://d4n-sec.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>编译原理-基本知识</title>
        <link>https://d4n-sec.github.io/p/compilationprinciplebaseknowledge/</link>
        <pubDate>Thu, 14 Nov 2024 14:03:12 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/compilationprinciplebaseknowledge/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114140514841.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114140514841&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;表格管理&#34;&gt;表格管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作用：用来记录源程序的各种信息以及编译过程中的各种状况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与编译前三阶段有关的表格有：符号表、常数表、标号表、分程序入口表、中间代码表等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;符号表&#34;&gt;符号表&lt;/h2&gt;
&lt;p&gt;用来登记源程序中的常量名变量名、发数组名、过程名等，记录它们的性质、定义和引用情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114140659798.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114140659798&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;常数表与标号表&#34;&gt;常数表与标号表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常数表：登记各类常量值&lt;/li&gt;
&lt;li&gt;标号表：登记标号的定义与应用 &lt;code&gt;例如 goto 代码后的标号&lt;/code&gt;，实际指向的是4元式的标号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114140911159.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114140911159&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;入口名表&#34;&gt;入口名表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;登记过程的层号，分程序符号表入口等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114141528050.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114141528050&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;中间代码表&#34;&gt;中间代码表&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114141559050.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114141559050&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;出错处理&#34;&gt;出错处理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;如果源程序有错误，编译程序应当设法发现错误，并报告给用户&lt;/li&gt;
&lt;li&gt;由专门的出错处理程序来完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以检查的错误类型有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语法错误：在词法分析和语法分析阶段检测出来&lt;/li&gt;
&lt;li&gt;语义错误：一般在语义分析阶段检测&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;遍&#34;&gt;遍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;指对源程序或者源程序的中间结果从头到尾扫描一次，并做有关的加工处理，生成新的中间结果或者目标代码&lt;/li&gt;
&lt;li&gt;与阶段的含义毫无关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一遍扫描&#34;&gt;一遍扫描&lt;/h2&gt;
&lt;p&gt;以&lt;em&gt;&lt;strong&gt;语法分析&lt;/strong&gt;&lt;/em&gt;为中心&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114142016399.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114142016399&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;多遍扫描&#34;&gt;多遍扫描&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优点：节省内存空间，提高目标代码质量，使得编译的逻辑结构清晰&lt;/li&gt;
&lt;li&gt;缺点：编译时间较长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内存许可的情况下，遍数少一点&lt;/p&gt;
&lt;h1 id=&#34;编译程序&#34;&gt;编译程序&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;直接用机器语言编写编译程序&lt;/li&gt;
&lt;li&gt;用汇编编写编译程序，去适配某个语言&lt;/li&gt;
&lt;li&gt;用高级语言编写编译程序（普遍使用）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自编译&#34;&gt;自编译&lt;/h2&gt;
&lt;p&gt;例如Go语言的编译器是Go语言写的，这就叫做自编译&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;怎么做到的？语言开发的前期的编译器不是Go语言写的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优点：&lt;/li&gt;
&lt;li&gt;缺点：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编译工具&#34;&gt;编译工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LEX（词法分析）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YACC（用于自动产生LALR分析表）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;基础知识&#34;&gt;基础知识&lt;/h1&gt;
&lt;h2 id=&#34;高级语言&#34;&gt;高级语言&lt;/h2&gt;
&lt;p&gt;程序语言是一个记号系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法&lt;/li&gt;
&lt;li&gt;语义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任何语言程序都可以看成是一定字符集（字母表）上的字符串&lt;/li&gt;
&lt;li&gt;语法使得这串字符形成一个形式上正确的程序&lt;/li&gt;
&lt;li&gt;语法=&lt;a class=&#34;link&#34; href=&#34;#%E8%AF%8D%E6%B3%95%E8%A7%84%E5%88%99&#34; &gt;词法规则&lt;/a&gt;+&lt;a class=&#34;link&#34; href=&#34;#%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99&#34; &gt;语法规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114143201503.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114143201503&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;单词符号&#34;&gt;单词符号&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语言中具有独立意义的最基本结构&lt;/li&gt;
&lt;li&gt;单词符号一般包括：常数，标识符，基本字，算符，界限符等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;词法规则&#34;&gt;词法规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;规定了字母表中哪些字符串是单词符号&lt;/li&gt;
&lt;li&gt;我们用&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;正规式&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;有限自动机理论&lt;/a&gt;来描述词法结构和进行词法分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法规则&#34;&gt;语法规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;规定了如何从单词符号来形成&lt;a class=&#34;link&#34; href=&#34;#%E8%AF%AD%E6%B3%95%E5%8D%95%E4%BD%8D&#34; &gt;语法单位&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;现在多数程序语言使用&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;上下文无关文法&lt;/a&gt;来描述语法规则。&lt;/li&gt;
&lt;li&gt;语言的词法规则和语法规则定义了程序的形式结构，是判断输入字符串是否构成一个形式上正确的程序的依据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法单位&#34;&gt;语法单位&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语法单位一般包括：表达式，子句，语句，函数，过程，程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语义&#34;&gt;语义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于一个语言来说，不仅要给出它的词法、语法规则，而且要定义它的单词符号河语法单位的意义。&lt;/li&gt;
&lt;li&gt;离开语义，语言只是一堆符号的集合。&lt;/li&gt;
&lt;li&gt;各种语言中有形式上完全相同的语法单位，含义却不尽相同。&lt;/li&gt;
&lt;li&gt;对某种语言，可以定义一个程序的意义的一组规则称为语义规则。&lt;/li&gt;
&lt;li&gt;目前，大多数编译程序使用&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;基于属性文法的语法制导翻译方法&lt;/a&gt;来分析语义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文法&#34;&gt;文法&lt;/h2&gt;
&lt;p&gt;是描述语言的语法结构的形式规则&lt;/p&gt;
&lt;p&gt;例子：Young men like pop music&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114144542422.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;非终结符&#34;&gt;非终结符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;出现在规则的左部、用&amp;lt;&amp;gt;括起来、表示一定语法概念的词。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114144753546.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114144753546&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;终结符&#34;&gt;终结符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语言中不可再分割的字符串（包括单个字符组成的串）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;终结符是组成句子的基本单位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114144855180.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114144855180&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;开始符号&#34;&gt;开始符号&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;表示所定义的语法范畴的非终结符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;开始符号又称为识别符号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;产生式&#34;&gt;产生式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是用来定义符号串之间关系的一组（语法）规则&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;A -&amp;gt; a&lt;/code&gt;表示&lt;code&gt;A产生a&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;推导&#34;&gt;推导&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;推导是从开始符号开始，通过使用产生式的右部取代左部，最终能产生语言的一个句子的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;最左（右）推导：每次使用一个规则，以其右部取代符号串最左（右）非终结符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最左（右）推导被称为规范推导&lt;/p&gt;
&lt;h2 id=&#34;归约&#34;&gt;归约&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;归约是推导的逆过程，即，从给定的源语言的句子开始，通过规则的左部取代右部，最终达到开始符号的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最左（右）归约是最右（左）推导的逆过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最左归约和最右归约称为规范归约&lt;/p&gt;
&lt;h2 id=&#34;句型句子和语言&#34;&gt;句型，句子和语言&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114145508614.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114145508614&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114145918702.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114145918702&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;句子符合语法规则，但是不一定具有含义，所以语言是句子的子集&lt;/p&gt;
&lt;h2 id=&#34;文法规则的递归&#34;&gt;文法规则的递归&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非终结符的定义中包含了非终结符自身&lt;/li&gt;
&lt;li&gt;使用文法的递归定义要谨慎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114150203626.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;文法规则的扩充表示&#34;&gt;文法规则的扩充表示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;扩充的BNF表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提因子：U-&amp;gt;ax|ay|az  写为 U-&amp;gt;a(x|y|z)&lt;/li&gt;
&lt;li&gt;重复次数的指定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114150455861.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114150455861&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任选符号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114150559477.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114150559477&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;元语言符号&#34;&gt;元语言符号&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;表示或者，&lt;code&gt;-&amp;gt;&lt;/code&gt;表示可以转化，这两个属于元语言符号&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法树&#34;&gt;语法树&lt;/h2&gt;
&lt;p&gt;定义：用来表示语言句子结构的树&lt;/p&gt;
&lt;p&gt;使用语法树可以使语法分析过程直观、形象，易于判断文法二义性&lt;/p&gt;
&lt;h3 id=&#34;子树&#34;&gt;子树&lt;/h3&gt;
&lt;p&gt;除叶子结点之外的任意结点连同它的所有子孙结点构成子树。&lt;/p&gt;
&lt;h3 id=&#34;修剪子树&#34;&gt;修剪子树&lt;/h3&gt;
&lt;p&gt;剪去子树树根的所有孩子&lt;/p&gt;
&lt;h3 id=&#34;句型&#34;&gt;句型&lt;/h3&gt;
&lt;p&gt;在一棵语法树生长过程中的任何时刻，所有那些叶子结点排列起来就是一个句型&lt;/p&gt;
&lt;h3 id=&#34;短语&#34;&gt;短语&lt;/h3&gt;
&lt;p&gt;子树的末端符号自左到右述成串，相对于子树树根而言称为短语。&lt;/p&gt;
&lt;h4 id=&#34;简单短语&#34;&gt;简单短语&lt;/h4&gt;
&lt;p&gt;也叫：直接短语。若短语事某子树根经过1步推导得到的，则称之为该子树根的简单短语。&lt;/p&gt;
&lt;h4 id=&#34;句型的短语&#34;&gt;句型的短语&lt;/h4&gt;
&lt;p&gt;该句型中哪些符号串可构成某子树根的短语。&lt;/p&gt;
&lt;h3 id=&#34;句柄&#34;&gt;句柄&lt;/h3&gt;
&lt;p&gt;句型中的最左简单短语，句柄是最左归约时要寻找的简单短语&lt;/p&gt;
&lt;h1 id=&#34;文法与语言的关系&#34;&gt;文法与语言的关系&lt;/h1&gt;
&lt;h2 id=&#34;文法与语言的形式定义&#34;&gt;文法与语言的形式定义&lt;/h2&gt;
&lt;h3 id=&#34;chomsky对文法的定义&#34;&gt;Chomsky对文法的定义&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114151030440.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114151030440&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;chomsky对文法的分类&#34;&gt;Chomsky对文法的分类&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114151207644.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114151207644&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;0型文法&#34;&gt;0型文法&lt;/h4&gt;
&lt;p&gt;短语文法，无限制文法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114151409810.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114151409810&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别0型语言的自动机称为图灵机（TM）&lt;/li&gt;
&lt;li&gt;0型文法是对产生式限制最少的文法&lt;/li&gt;
&lt;li&gt;任何0型语言都是递归可枚举的&lt;/li&gt;
&lt;li&gt;对0型文法产生式的形式作某些限制，可以得到其他类型文法的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1型文法&#34;&gt;1型文法&lt;/h4&gt;
&lt;p&gt;长度增加文法，上下文有关文法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114151854524.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114151854524&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;或者也可以定义为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114151929581.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114151929581&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别1型语言的自动机称为线性界限自动机（&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;LBA&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;1型文法意味着，对非终结符进行替换时务必考虑上下文，并且，一般不允许替换成s，除非是开始符号产生ε&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2型文法&#34;&gt;2型文法&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;上下文无关文法&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114152305516.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114152305516&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2型文法对产生式的要求是：产生式左部一定是非终结符，产生式右部可以是VN、VT或ε；非终结符的替换不必考虑上下文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;识别2型语言的自动机称为下推自动机（PDA）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3型文法&#34;&gt;3型文法&lt;/h4&gt;
&lt;p&gt;正规文法RG、左/右线性文法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114152527166.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114152527166&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3型文法中的产生式要么均是右线性产生式，要么是左线性产生式，不能既有左线性产生式，又有右线性产生式。若所有产生式均是左线性，则称为左线性文法；若所有产生式均是右线性，则称为右线性文法&lt;/li&gt;
&lt;li&gt;识别3型语言的自动机称为有限状态自动机。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;总结&#34;&gt;总结&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114153803345.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114153803345&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;i型语&#34;&gt;i型语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由i型文法生成的语言成为i型语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114152843678.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114152843678&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;
&lt;p&gt;在词法分析和语法分析中对产生式有限制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不存在P→P产生式&lt;/li&gt;
&lt;li&gt;产生式中出现的任何非终结符P必须有用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241114153226386.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241114153226386&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;文法的简化&#34;&gt;文法的简化&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;同一语言可以用不同文法来描述，显然应当选择产生式的个数最少，最符合语言特征的来描述&lt;/li&gt;
&lt;li&gt;在文法中，有些产生式对推导不起作用，要删除掉
&lt;ol&gt;
&lt;li&gt;如某个产生式在推导过程中永远不会被用到，即由开始符号推导，永远推不到的左部的非终结符。&lt;/li&gt;
&lt;li&gt;再如永远导不出终结符串的产生式。&lt;/li&gt;
&lt;li&gt;形如P→&amp;gt;P的产生式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简化步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找有无形如P-&amp;gt;P的产生式，若有则删除；&lt;/li&gt;
&lt;li&gt;若某个产生式在推导过程中永远不会被用到，删除它；&lt;/li&gt;
&lt;li&gt;若某个产生式在推导过程中不能从中导出终结符，删除它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，整理所有剩余产生式，就得到简化的文法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;文法的二义性&#34;&gt;文法的二义性&lt;/h1&gt;
&lt;h2 id=&#34;句子二义性&#34;&gt;句子二义性&lt;/h2&gt;
&lt;p&gt;如果文法的一个句子存在对应的两棵或两棵以上的语法树，则该句子是二义的&lt;/p&gt;
&lt;h2 id=&#34;文法二义性&#34;&gt;文法二义性&lt;/h2&gt;
&lt;p&gt;包含二义性句子的文法是二义文法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二义性会给语法分析带来不确定性&lt;/p&gt;
&lt;p&gt;不存在一个算法能够在有限的步数内确定判断一个文法是否为二义文法，即文法的二义性是不可判定的&lt;/p&gt;
&lt;p&gt;证明是二义性，只需要举例一个&lt;/p&gt;
&lt;p&gt;若能控制文法的二义性，即加入人为的附加条件（确定优先级），则二义文法的存在并非坏事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;笔者记&#34;&gt;笔者记&lt;/h1&gt;
&lt;p&gt;归约是更加符合编译程序逻辑的过程&lt;/p&gt;
</description>
        </item>
        <item>
        <title>编译原理-目标代码生成</title>
        <link>https://d4n-sec.github.io/p/compilationprinciplecodegeneration/</link>
        <pubDate>Mon, 11 Nov 2024 17:15:43 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/compilationprinciplecodegeneration/</guid>
        <description>&lt;h1 id=&#34;目标代码生成&#34;&gt;目标代码生成&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把经过优化的中间代码转化成特定机器上的低级语言代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目标代码的形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对指令代码：可立即执行的目标代码。&lt;/li&gt;
&lt;li&gt;汇编指令代码：汇编语言程序，需要通过汇编程序汇编后才能运行。&lt;/li&gt;
&lt;li&gt;可重定位指令代码：先将各目标模块连接起来，确定变量、常数在主存中的位置，装入主存后才能成为可以运行的绝对指令代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>编译原理-优化</title>
        <link>https://d4n-sec.github.io/p/compilationprincipleoptimize/</link>
        <pubDate>Mon, 11 Nov 2024 16:59:47 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/compilationprincipleoptimize/</guid>
        <description>&lt;h1 id=&#34;优化&#34;&gt;优化&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;任务
&lt;ul&gt;
&lt;li&gt;对前面产生的中间代码进行加工变换，以期在最后阶段能产生更为高效的目标代码。
&lt;ul&gt;
&lt;li&gt;原则:等价变换&lt;/li&gt;
&lt;li&gt;主要关注：公共子表达式的提取、合并已知量、删除无用语句、循环优化等。
&lt;ul&gt;
&lt;li&gt;循环优化：将循环内的语句优化为必需语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优化举例&#34;&gt;优化举例&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241111170905973.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241111170905973&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上图左边是C语句，右边为for循环的拆解，根据右边语句生成中间代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241111170844192.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241111170844192&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;中间代码如上，优化结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241111171147194.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241111171147194&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;优化结果中可以看到，乘法消失了&lt;/p&gt;
&lt;p&gt;如果循环中只有示例中的代码的话，可以使用加法一次性计算代替循环计算（&lt;code&gt;+1到100&lt;/code&gt;变为&lt;code&gt;+5050&lt;/code&gt;，依旧等价）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>编译原理-语义分析和中间代码生成</title>
        <link>https://d4n-sec.github.io/p/semanticanalysis/</link>
        <pubDate>Fri, 08 Nov 2024 19:41:32 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/semanticanalysis/</guid>
        <description>&lt;h1 id=&#34;语义分析和中间代码生成&#34;&gt;语义分析和中间代码生成&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;任务
&lt;ul&gt;
&lt;li&gt;对语法分析识别出的各类语法范畴，分析其含义，进行和初步翻译，产生介于源代码和目标代码之间的一种代码。&lt;/li&gt;
&lt;li&gt;分为两阶段工作：
&lt;ul&gt;
&lt;li&gt;对每种语法范畴进行静态语义检查&lt;/li&gt;
&lt;li&gt;若语义正确，就进行&lt;a class=&#34;link&#34; href=&#34;#middleCode&#34; &gt;中间代码&lt;/a&gt;的翻译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;middleCode&#34;&gt;中间代码&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;中间代码形式有：四元式、三元式、逆波兰式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中间代码生成举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108195040955.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241108195040955&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;T3为什么是左操作数？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>编译原理-语法分析</title>
        <link>https://d4n-sec.github.io/p/grammaranalysis/</link>
        <pubDate>Fri, 08 Nov 2024 17:13:30 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/grammaranalysis/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;任务
&lt;ul&gt;
&lt;li&gt;在&lt;a class=&#34;link&#34; href=&#34;https://d4n-sec.github.io/p/lexicalanalysis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;词法分析&lt;/a&gt;的基础上，根据语言的&lt;a class=&#34;link&#34; href=&#34;#grammarRules&#34; &gt;&lt;em&gt;&lt;strong&gt;语法规则&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;，把单词符号组成的各类&lt;a class=&#34;link&#34; href=&#34;#grammarUnits&#34; &gt;语法单位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;grammarRules&#34;&gt;语法规则&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;语言的规则，又称为文法：规定单词如何构成&lt;a class=&#34;link&#34; href=&#34;#grammarUnits&#34; &gt;语法单位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;grammarUnits&#34;&gt;语法单位&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;语法单位包括：短语、子句、语句、过程、程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;语法规则如何表示&#34;&gt;语法规则如何表示&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;BNF（巴科斯范式）：&lt;code&gt;A::=B|C&lt;/code&gt; -&amp;gt; 表示A定义为B或C&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;语法分析的方法&#34;&gt;语法分析的方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;推导（Derive）和归约（Reduce）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推导&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最左推导、最右推导
&lt;ul&gt;
&lt;li&gt;最&lt;em&gt;&lt;strong&gt;右&lt;/strong&gt;&lt;/em&gt;推导：每次推导都把最&lt;em&gt;&lt;strong&gt;右&lt;/strong&gt;&lt;/em&gt;方的&lt;strong&gt;字母&lt;/strong&gt;按照规则&lt;strong&gt;转化为标识符或者常量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归约（推导的逆过程）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最右归约、最左归约
&lt;ul&gt;
&lt;li&gt;最&lt;em&gt;&lt;strong&gt;左&lt;/strong&gt;&lt;/em&gt;归约：每次归约都把最&lt;em&gt;&lt;strong&gt;左&lt;/strong&gt;&lt;/em&gt;方的&lt;strong&gt;标识符或者常量&lt;/strong&gt;按照规则转化为&lt;strong&gt;字母&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两个栗子&#34;&gt;两个栗子&lt;/h2&gt;
&lt;h3 id=&#34;语法规则&#34;&gt;语法规则&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 定义&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;V::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;标识符
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;常数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;E
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;T&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;E+T
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;T::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;F&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;T*F
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;V&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;E&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;C
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;例子一&#34;&gt;例子一&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下图中，箭头方向是最右推导，箭头反方向最左归约&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108181310685.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241108181310685&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;例子二&#34;&gt;例子二&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下图中，箭头方向是最左推导，箭头反方向最右归约&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108181103905.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241108181103905&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;语法分析过程&#34;&gt;语法分析过程&lt;/h1&gt;
&lt;p&gt;语法分析过程也可以用一颗倒着的树来表示，这棵树叫语法树，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108181746919.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241108181746919&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析过程思维导图&#34;&gt;解析过程思维导图&lt;/h2&gt;
&lt;p&gt;仅做理解使用&lt;/p&gt;
&lt;h3 id=&#34;语法规则-1&#34;&gt;语法规则&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 定义&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;V::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;标识符
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;常数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;E
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;T&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;E+T
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;T::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;F&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;T*F
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F::&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;V&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;E&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;C
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;赋值语句&#34;&gt;赋值语句&lt;/h3&gt;
&lt;p&gt;例如&lt;code&gt;var a=b*10&lt;/code&gt;，可以按照语法规则解析时，思维流程图为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108175418382.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241108175418382&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;语法规则会递归解析，直到变成最开始的定义&lt;/p&gt;
&lt;p&gt;步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原式子&lt;/li&gt;
&lt;li&gt;处理原式子的规则&lt;/li&gt;
&lt;li&gt;处理后的子式子&lt;/li&gt;
&lt;li&gt;按照刚才处理的规则，子式子对应的所属&lt;/li&gt;
&lt;li&gt;查看所属是否可以对应为&lt;em&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/em&gt;或者&lt;em&gt;&lt;strong&gt;匹配下一个规则&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;确定结束或者用下一个规则处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如此循环，直到所有式子处理结束&lt;/p&gt;
&lt;h1 id=&#34;语法分析&#34;&gt;语法分析&lt;/h1&gt;
&lt;p&gt;语法分析的地位：是编译程序的核心部分&lt;/p&gt;
&lt;p&gt;语法分析程序的处理：识别由词法分析得出的单词序列是否是给定文法的句子。&lt;/p&gt;
&lt;p&gt;语法分析的理论基础：上下文无关文法和下推自动机&lt;/p&gt;
&lt;p&gt;语法分析的方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;自上而下语法分析反复使用不同产生式进行推导以谋求与输入符号串相匹配&lt;/li&gt;
&lt;li&gt;自下而上语法分析对输入符号串寻找不同产生式进行归约直到文法开始符号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里所说的输入符号指词法分析所识别的单词。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下推自动机&#34;&gt;下推自动机&lt;/h2&gt;
&lt;p&gt;下推自动机模型图（PDA）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241118170941172.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118170941172&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PDA和FA的模型相比，多了一个下推栈。&lt;/li&gt;
&lt;li&gt;PDA的动作由三个因素来决定：当前状态、读头所指向符号、下推栈栈顶符号。&lt;/li&gt;
&lt;li&gt;一个输入串能被PDA所接受，仅当输入串读完，下推栈变空；或输入串读完，控制器到达某些终态&lt;/li&gt;
&lt;li&gt;正规文法和有限自动机仅适合于描述和识别高级语言的各类单词，语句可用上下文无关文法来描述，而下推自动机又恰好能识别上下文无关文法所能描述的语言，因此上下文无关文法及其对应的下推自动机就成为编译技术中语法分析的理论基础。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241118171246565.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118171246565&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241118171541274.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118171541274&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;自上而下分析法&#34;&gt;自上而下分析法&lt;/h2&gt;
&lt;p&gt;定义：从文法的开始符号开始，反复使用不同产生式进行推导以谋求与&lt;em&gt;&lt;strong&gt;输入符号串&lt;/strong&gt;&lt;/em&gt;相匹配。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此处的输入符号串是指词法分析结果的一串二元式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;试探法：带回溯的自上而下分析法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缺陷：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果文法存在左递归，语法分析会无限循环下去。（分为直接和间接左递归，可以消除左递归）&lt;/p&gt;
&lt;p&gt;若产生式存在多个候选式，选择哪个进行推导完全是盲目的。（预测与提左因子）&lt;/p&gt;
&lt;p&gt;回溯会引起时间和空间的大量消耗。（可以消除回溯，非盲目选择即可消除回溯）&lt;/p&gt;
&lt;p&gt;如果被识别的语句是错的，算法无法指出错误的确
切位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;带预测分析的pda&#34;&gt;带预测分析的PDA&lt;/h2&gt;
&lt;p&gt;在PDA中加入预测分析之后，可以消除自上而下分析中出现回溯的现象。此时PDA可以改造为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241119121345672.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241119121345672&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;改造后，整个分析过程都在预测分析程序控制下工作。&lt;/li&gt;
&lt;li&gt;预测分析程序用了一个预测分析表，它是预测分析程序分析时的主要依据。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;预测分析表是一矩阵M[A,a]，其中行标A是非终结符，列标a是终结符或串结束符;矩阵元素M[A,a]是存放A的一个候选式，指出当前栈顶符号为A且面临读入符号为a时应选的候选式；或者存放“出错标志”，指出A不该面临读入符号a。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>编译原理-词法分析</title>
        <link>https://d4n-sec.github.io/p/lexicalanalysis/</link>
        <pubDate>Fri, 08 Nov 2024 17:06:57 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/lexicalanalysis/</guid>
        <description>&lt;h1 id=&#34;关于&#34;&gt;关于&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入源程序，对构成源程序的字符串进行扫描和分解，识别出一个个的&lt;a class=&#34;link&#34; href=&#34;#word&#34; &gt;单词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;词法分析依照词法规则，识别出正确的单词，&lt;a class=&#34;link&#34; href=&#34;#trans&#34; &gt;转换&lt;/a&gt;为统一规格，备用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id=&#34;word&#34;&gt;单词&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高级语言中有实在意义的最小语法单位，字符组成（关键字？）&lt;/li&gt;
&lt;li&gt;包括：
&lt;ul&gt;
&lt;li&gt;基本字：&lt;code&gt;void int float&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;标识符：变量名，函数名等&lt;/li&gt;
&lt;li&gt;整常数：例如 a*50 中的50&lt;/li&gt;
&lt;li&gt;运算符：&lt;code&gt;+ - * / =&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;界限符：&lt;code&gt;{} &#39;&#39; ; ()&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id=&#34;trans&#34;&gt;转换&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对基本字、运算符、界限符的转换&lt;/li&gt;
&lt;li&gt;标识符的转换&lt;/li&gt;
&lt;li&gt;常数的转换&lt;/li&gt;
&lt;li&gt;转换完成后的格式：&lt;em&gt;&lt;strong&gt;（类号，内码）&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;描述词法规则的有效工具是&lt;em&gt;&lt;strong&gt;正规式&lt;/strong&gt;&lt;/em&gt;和&lt;em&gt;&lt;strong&gt;有限自动机&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;词法分析&#34;&gt;词法分析&lt;/h1&gt;
&lt;p&gt;编译的第一阶段，在单词的级别上分析和翻译源程序。&lt;/p&gt;
&lt;h1 id=&#34;理论基础&#34;&gt;理论基础&lt;/h1&gt;
&lt;h2 id=&#34;有限自动机理论&#34;&gt;有限自动机理论&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有限自动机理论与&lt;a class=&#34;link&#34; href=&#34;https://d4n-sec.github.io/p/compilationprinciplebaseknowledge/#3%E5%9E%8B%E6%96%87%E6%B3%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;正规文法&lt;/a&gt;、正规式之间在描述语言方面有一一对应的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;正规集&#34;&gt;正规集&lt;/h3&gt;
&lt;p&gt;由正规文法产生的语言&lt;/p&gt;
&lt;p&gt;正规集是集合，可有穷也可无穷。可通过&lt;a class=&#34;link&#34; href=&#34;#%E6%AD%A3%E8%A7%84%E5%BC%8F&#34; &gt;正规式&lt;/a&gt;来形式化表示。&lt;/p&gt;
&lt;h3 id=&#34;正规式&#34;&gt;正规式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241115102302153.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115102302153&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;诶，蛙趣，笔者被做掉了，正规文法，正规式，正规集傻傻分不清楚。&amp;ndash;TODO&amp;ndash;&lt;/p&gt;
&lt;h2 id=&#34;有限自动机&#34;&gt;有限自动机&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;有限自动机是一种识别装置，它能准确地识别正规集。它为词法分析程序的构造提供了方法和工具。&lt;/p&gt;
&lt;p&gt;有限自动机是具有离散输入输出系统的数学模型，它具有有限数目的内部状态，系统可以根据当前所处的状态和面临的输入字符决定系统的后继行为。其当前状态概括了过去输入处理的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241115103332070.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115103332070&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;包含确定的有限状态自动机 DFA 和 不确定的有限状态自动机 NFA&lt;/p&gt;
&lt;p&gt;考试考点如下，笔者用不着，不学&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NFA确定化
有限状态自动机的简化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有限状态自动机可以和正规式互相转化，正向是简化，反向是分裂&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241115110006664.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241115110006664&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;词法分析程序&#34;&gt;词法分析程序&lt;/h1&gt;
&lt;p&gt;扫描源程序字符串，按照词法规则识别出一个个正确的单词，并转换为相应的二元式形式（类号，内码），交给语法分析使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241118161941360.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241118161941360&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预处理
&lt;ol&gt;
&lt;li&gt;源程序中包含注解部分，还有无用的空格、跳格、回车换行等编辑字符，它们与词法分析无关。&lt;/li&gt;
&lt;li&gt;一行语句结束应配上一个特殊字符说明。&lt;/li&gt;
&lt;li&gt;有些语言要识别标号区，区分标号语句，找出续行符连接成完整语句等。&lt;/li&gt;
&lt;li&gt;输出源程序清单以便复核。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;预处理程序任务：
&lt;ul&gt;
&lt;li&gt;从输入缓冲区中读取源程序，预处理后送入扫描缓冲区。此时，扫描缓冲区中的字符都是有效字符。&lt;/li&gt;
&lt;li&gt;词法分析程序这时可以再对扫描缓冲区进行扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;超前搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;一般高级语言不必超前搜索&lt;/p&gt;
&lt;p&gt;但有些对关键字不加保护的语言，单词间没有明确界符，要在上下文环境中识别单词，这时需要超前搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;词法分析程序输出格式&#34;&gt;词法分析程序输出格式&lt;/h2&gt;
&lt;p&gt;二元式（类号，内码）：每个单词对应一个二元式。其中类号用整数表示，类号既可区分单词种类，又可便于程序处理。&lt;/p&gt;
&lt;p&gt;类号用于区分单词的种类，考虑的原则是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个基本字占有一个类号，内码缺省；&lt;/li&gt;
&lt;li&gt;各种标识符统一为一类，由内码来区分不同的标识符名。通常将各标识符的符号表入口地址作为其内码。&lt;/li&gt;
&lt;li&gt;对于常量，以常量的数据类型区分不同类号，对每类设置相应常量表。各常量在其常量表中的入口地址作为其内码。&lt;/li&gt;
&lt;li&gt;对于界符，通常一个符号一个类号，内码缺省，&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;单词分类&#34;&gt;单词分类&lt;/h3&gt;
&lt;p&gt;以C语言为例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本字（关键字、保留字）&lt;/p&gt;
&lt;p&gt;标识符：变量名、数组名、函数名、过程名&lt;/p&gt;
&lt;p&gt;常量&lt;/p&gt;
&lt;p&gt;运算符&lt;/p&gt;
&lt;p&gt;边界符（界符）：&lt;code&gt;. , ; ( ) : {}&lt;/code&gt;等，有时把运算符当做边界符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;词法分析程序设计方法&#34;&gt;词法分析程序设计方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;写出该语言的词法规则。&lt;/li&gt;
&lt;li&gt;把词法规则转换为相应的状态转换图，&lt;/li&gt;
&lt;li&gt;把各转换图的初态连在一起，构成识别该语言的自动机&lt;/li&gt;
&lt;li&gt;设计扫描器
&lt;ol&gt;
&lt;li&gt;把扫描器作为语法分析的一个过程，当语法分析需要一个单词时，就调用扫描器。&lt;/li&gt;
&lt;li&gt;扫描器从初态出发，当识别一个单词便进入终态，送出二元式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以用状态矩阵代替状态图，以便于计算机处理。&lt;/p&gt;
&lt;p&gt;词法分析程序=状态转换图+控制程序&lt;/p&gt;
&lt;p&gt;控制程序简单，关键是构造状态转换矩阵及其相应的语义动作。可根据单词的正规式及其相应的语义动作&lt;em&gt;&lt;strong&gt;自动产生词法分析程序&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>编译原理</title>
        <link>https://d4n-sec.github.io/p/compilationprinciple/</link>
        <pubDate>Fri, 08 Nov 2024 17:02:31 +0800</pubDate>
        
        <guid>https://d4n-sec.github.io/p/compilationprinciple/</guid>
        <description>&lt;img src="https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108170335764.png" alt="Featured image of post 编译原理" /&gt;&lt;h1 id=&#34;编译程序的工作&#34;&gt;编译程序的工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://d4n-sec.github.io/p/LexicalAnalysis/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;词法分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;语法分析&lt;/li&gt;
&lt;li&gt;语义分析和中间代码生成&lt;/li&gt;
&lt;li&gt;优化&lt;/li&gt;
&lt;li&gt;目标代码生成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://d4n-picture-database.oss-cn-beijing.aliyuncs.com/img/image-20241108164207108.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20241108164207108&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上图中的语义分析一般来说会被融合进语法分析中&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
